#!/usr/bin/env bash

function check_toolchain() {

    export TC="$(find ${TOOLCHAIN}/bin -type f -name aarch64-*-gcc)";

	if [[ -f "${TC}" ]]; then
		export CROSS_COMPILE="$(command -v ccache) ${TOOLCHAIN}/bin/$(echo ${TC} | awk -F '/' '{print $NF'} |\
sed -e 's/gcc//')";
		echo -e "Using toolchain: $(${CROSS_COMPILE}gcc --version | head -1)";
	else
		echo -e "No suitable toolchain found in ${TOOLCHAIN}";
		exit 1;
	fi
}

export DEVICE=$1;
if [[ -z ${DEVICE} ]]; then
    export DEVICE="mido";
fi

KERNELDIR="${HOME}/kernel/stormguard"

# These won't change
export SRCDIR="${HOME}/kernel";
export OUTDIR="${KERNELDIR}/out";
export ANYKERNEL="${SRCDIR}/anykernel/miui";
export ARCH="arm64";
export SUBARCH="arm64";
export TOOLCHAIN="${SRCDIR}/toolchain/snapshot";
export DEFCONFIG="stormguard_defconfig";
export ZIP_DIR="${SRCDIR}/files/${DEVICE}";
export IMAGE="arch/${ARCH}/boot/Image.gz-dtb";
export DB="arch/arm/boot/dts/qcom/${DEVICE}.dtb";
export DB0="arch/arm64/boot/dts/qcom/msm8953-qrd-sku3.dtb";
export DB1="arch/arm64/boot/dts/qcom/msm8952-qrd-skum.dtb";
export DB2="arch/arm64/boot/dts/qcom/msm8952-cdp.dtb";
export DB3="arch/arm64/boot/dts/qcom/msm8952-ext-codec-cdp.dtb";
export DB4="arch/arm64/boot/dts/qcom/msm8952-mtp.dtb";
export MODULEDIR="${OUTDIR}/modules";
export VERSION="3.1";

export MAKE="make";

if [[ -z "${JOBS}" ]]; then
    export JOBS="$(grep -c '^processor' /proc/cpuinfo)";
fi

check_toolchain;

export TCVERSION1="$(${CROSS_COMPILE}gcc --version | head -1 |\
awk -F '(' '{print $2}' | awk '{print tolower($1)}')"
export TCVERSION2="$(${CROSS_COMPILE}gcc --version | head -1 |\
awk -F ')' '{print $2}' | awk '{print tolower($1)}')"
if [[ -z "${NAME}" ]]; then
    export NAME="Stormguard-MIUI";
fi

export ZIPNAME="${NAME}-${VERSION}-$(date +%Y%m%d-%H%M)-${DEVICE}.zip"
export LOCALVERSION="-MIUI"
export FINAL_ZIP="${ZIP_DIR}/${ZIPNAME}"

if [ -f "${ZIMAGE}" ];
then
rm -f ${ZIMAGE};
rm -rf ${MODULEDIR};
echo -e "Old build deleted";
else
echo -e "Nothing has been made";
fi

[ ! -d "${ANYKERNEL}" ] && mkdir -pv ${ANYKERNEL}
[ ! -d "${ZIP_DIR}" ] && mkdir -pv ${ZIP_DIR}
[ ! -d "${MODULEDIR}" ] && mkdir -pv ${MODULEDIR}/pronto

if [ -f "${IMAGE}" ];
then
rm -f ${IMAGE};
echo -e "Old image deleted";
else
echo -e "Nothing has been made";
fi

if [[ "$@" =~ "mrproper" ]]; then
    ${MAKE} mrproper
fi

if [[ "$@" =~ "clean" ]]; then
    ${MAKE} clean
fi

${MAKE} $DEFCONFIG;
START=$(date +"%s");
${MAKE} -j${JOBS};
exitCode="$?";
END=$(date +"%s")
DIFF=$(($END - $START))
echo " ";
echo -e "Build took $(($DIFF / 60)) minute(s) and $(($DIFF % 60)) seconds.";
echo " ";

if [[ ! -f "${IMAGE}" ]]; then
    echo -e "Build failed :P";
    exit 1;
else
    echo -e "Build Succesful!";
fi

sign="scripts/sign-file";
KEY0="signing_key.x509";
KEY1="signing_key.priv";
MODULE="drivers/staging/prima/wlan.ko";
MODULES="${MODULEDIR}/wlan.ko";
PRONTO="${MODULEDIR}/pronto/pronto_wlan.ko";
ZIMAGE="${OUTDIR}/zImage";

if [ -f "${IMAGE}" ];
then
echo -e "Converting Image.gz-dtb to zImage";
sleep 2;
echo -e "Combining database";
sleep 1;
cat $DB0 $DB1 $DB2 $DB3 $DB4 > $DB;
echo -e "Puting database into Image"
sleep 3;
cat ${IMAGE} $DB > ${ZIMAGE};
echo -e "zImage creation success";
else
echo -e "Nothing has been made";
exit 1;
fi

if [ -f "${MODULE}" ];
then
echo -e "Signing Module";
$sign sha512 $KEY1 $KEY0 $MODULE;
cp $MODULE ${MODULEDIR};
cp -ar $MODULES ${PRONTO};
sleep 4;
else
echo -e "no module found, did you on a right branch?";
exit 1;
fi

if [ -f "${PRONTO}" ];
then
echo -e "Copying Modules"
cp -R ${MODULEDIR} ${ANYKERNEL};
sleep 4;
else
echo -e "Copying modules failed, No such file or directory";
exit 1;
fi

if [ -f "${ZIMAGE}" ];
then
echo -e "Copying zImage into AnyKernel";
cp ${ZIMAGE} ${ANYKERNEL};
sleep 3;
else
echo -e "Nothing has been made";
exit 1;
fi

echo -e "Moving to AnyKernel";
cd ${ANYKERNEL};
git checkout miui;
sleep 2;
echo -e "Creating FINAL ZIP";
zip -r9 ${FINAL_ZIP} *;
sleep 2;
cd -;

if [ -f "$FINAL_ZIP" ];
then
echo -e "$ZIPNAME\nzip can be found at $FINAL_ZIP";
sleep 3;
else
echo -e "Zip Creation Failed =(";
fi # FINAL_ZIP check

exit ${exitCode};
